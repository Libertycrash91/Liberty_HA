    sensor:

    # DIVERS
      night_state:
        friendly_name: Night State
        value_template: "{% if is_state('sun.sun', 'below_horizon') %}1{% else %}0{% endif %}"
              
      saison:
        friendly_name: saisons en francais          
        value_template: >-
          {% set traduction = {'summer':'Été', 'spring':'Printemps', 'autumn':'Automne', 'winter':'Hiver'}%}
          {% set saison = (states.sensor.season.state ) %}
          {{ traduction[saison] }}
              
      dans_2_heures:
        friendly_name: exemple, dans 2 heures          
        value_template: >-
          {{(as_timestamp(states.input_boolean.lave_linge.last_changed) + (7200)) | timestamp_custom("%Hh%m",true)}}
              
      demain:
        friendly_name: jour de demain          
        value_template: >-
          {% set demain = (as_timestamp(now())+ (86400)) | timestamp_custom("%A",true)
            | replace('Monday', 'Lundi')
            | replace('Tuesday', 'Mardi')
            | replace('Wednesday', 'Mercredi')
            | replace('Thursday', 'Jeudi')
            | replace('Friday', 'Vendredi')
            | replace('Saturday', 'Samedi')
            | replace('Sunday', 'Dimanche') %}
          {{ demain }}
              
    # SOLEIL ET LUNE
      sun_elevation:
        friendly_name: Sun Elevation
        icon_template: mdi:weather-sunny
        unit_of_measurement: "°"
        value_template: >
          {{ state_attr('sun.sun', 'elevation') }}

      lune:
        friendly_name: phases de la lune         
        value_template: >-
          {% set lune = states.sensor.moon_phase.state
            | replace('last_quarter', 'Dernier quartier')
            | replace('new_moon', 'Nouvelle lune')
            | replace('waxing_crescent', 'Premier croissant')
            | replace('first_quarter', 'Premier quartier')
            | replace('waxing_gibbous', 'Gibbeuse croissante')
            | replace('full_moon', 'Pleine lune')
            | replace('waning_gibbous', 'Gibbeuse décroissante')
            | replace('waning_crescent', 'Dernier croissant') %}
          {{ lune }}          
    # UPTIME
      uptime_ha:
        friendly_name: "Dernier démarrage de HA"
        value_template: >-        
          {%- set time = (as_timestamp(now()) - as_timestamp(states.sensor.uptime.last_changed)) | int  %}
          {%- set minutes = ((time % 3600) // 60) %}
          {%- set minutes = '{}min'.format(minutes) if minutes > 0 else '' %}
          {%- set hours = ((time % 86400) // 3600) %}
          {%- set hours = '{}h '.format(hours) if hours > 0 else '' %}
          {%- set days = (time // 86400) %}
          {%- set days = '{}j '.format(days) if days > 0 else '' %}
          {{ '- de 1min' if time < 60 else days + hours + minutes }} 

    # HEURE ET DATE
      heure:
        friendly_name: "heure"
        value_template: >-
          {{now().hour }}h{{now().minute }} 

      date_numero:
        friendly_name: "date numéro"
        value_template: >-
          {{now().day }}        

      date_jour:
        friendly_name: "date jour"
        value_template: >-
          {% set days = ["Lundi", "Mardi", "Mercredi", "Jeudi", "Vendredi", "Samedi", "Dimanche"]  %}
          {{ days[now().weekday()] }}

      date_jour_court:
        friendly_name: "date jour court"
        value_template: >-
          {% set days = ["L.", "M.", "Me.", "J.", "V.", "S.", "D."]  %}
          {{ days[now().weekday()] }}
              
      date_mois:
        entity_id: sensor.date
        friendly_name: "date mois"
        icon_template: mdi:calendar-today
        value_template: >
          {% set months = ["Janvier", "Fevrier", "Mars", "Avril", "Mai", "Juin", "Juillet", "Août", "Septembre", "Octobre", "Novembre", "Decembre"] %}
          {{  months[now().month-1] }}  
    
      date_mois_court:
        entity_id: sensor.date
        friendly_name: "date mois"
        icon_template: mdi:calendar-today
        value_template: >
          {% set months = ["Janv", "Fev", "Mars", "Avr", "Mai", "Juin", "Jui", "Août", "Sept", "Oct", "Nov", "Déc"] %}
          {{  months[now().month-1] }}  
              
      date_simple:
        entity_id: sensor.date
        friendly_name: "Date du jour"
        icon_template: mdi:calendar-today
        value_template: >
          {% set months = ["Janvier", "Fevrier", "Mars", "Avril", "Mai", "Juin", "Juillet", "Août", "Septembre", "Octobre", "Novembre", "Décembre"] %}
          {% set days = ["Lundi", "Mardi", "Mercredi", "Jeudi", "Vendredi", "Samedi", "Dimanche"]  %}
          {{ days[now().weekday()] + ' ' + now().day | string + ' ' + months[now().month-1] }}
              
      date_simple_v2:
        entity_id: sensor.date
        friendly_name: "Date du jour sans le nom du jour"
        icon_template: mdi:calendar-today
        value_template: >
          {% set months = ["Janvier", "Fevrier", "Mars", "Avril", "Mai", "Juin", "Juillet", "Août", "Septembre", "Octobre", "Novembre", "Decembre"] %}
          {{  now().day | string + ' ' + months[now().month-1] }}    
            
      date_annee:
        friendly_name: "date année"
        value_template: >-
          {{ now().year }}

      date_court:
        friendly_name: "date année"
        value_template: >-
          {{ states.sensor.date_jour_court.state }} {{ states.sensor.date_numero.state }} {{ states.sensor.date_mois_court.state }}

    # METEO
      weather_temperature:
        friendly_name: "Weather Température"
        value_template: >-          
          {% if states.weather.gif_sur_yvette.state == "unavailable" -%}
            {{ state_attr('weather.maison' , 'temperature') }}
          {% else -%}
            {{ state_attr('weather.gif_sur_yvette , 'temperature') }}
          {% endif -%} 
      weather_temperature_v2:
        friendly_name: "Weather Température"
        value_template: >-          
          {% if states.weather.gif_sur_yvette.state == "unavailable" -%}
            {{ state_attr('weather.maison' , 'temperature') }}
          {% else -%}
            {{ state_attr('weather.gif_sur_yvette' , 'temperature') }}
          {% endif -%} 
      weather_humidite:
        friendly_name: "Weather Humidité"
        value_template: "{{ state_attr('weather.gif_sur_yvette' , 'humidity') }}%"  
      weather_alert_inondation:
        friendly_name: "Alerte Inondation"
        value_template: "{{ state_attr('sensor.91_weather_alert' , 'Inondation') }}"
      weather_alert_grand_froid:
        friendly_name: "Alerte Grand-froid"
        value_template: "{{ state_attr('sensor.91_weather_alert' , 'Grand-froid') }}"
      weather_alert_orages:
        friendly_name: "Alerte Orages"
        value_template: "{{ state_attr('sensor.91_weather_alert' , 'Orages') }}"
      weather_alert_pluie_inondation:
        friendly_name: "Alerte Pluie-inondation"
        value_template: "{{ state_attr('sensor.91_weather_alert' , 'Pluie-inondation') }}"
      weather_alert_vent_violent:
        friendly_name: "Alerte Vent violent"
        value_template: "{{ state_attr('sensor.91_weather_alert' , 'Vent violent') }}"       
      weather_alert_neige_verglas:
        friendly_name: "Alerte Neige-verglas"
        value_template: "{{ state_attr('sensor.91_weather_alert' , 'Neige-verglas') }}"
      weather_alert_canicule:
        friendly_name: "Alerte Canicule"
        value_template: "{{ state_attr('sensor.91_weather_alert' , 'Canicule') }}"        
              
      weather_conditions:
        value_template: >-
          {% set meteo = states('weather.gif_sur_yvette') %}
          {% set traduction = {'cloudy':'Nuageux', 'rainy':'Pluvieux', 'partlycloudy':'Partiellement nuageux', 'clear-night':'Nuit claire', 'fog':'Brouillard', 'hail':'Grêle', 'lightning-rainy':'Pluie orageuse', 'lightning':'Orages', 'pouring':'Fortes pluies', 'snowy-rainy':'Neigeux', 'snowy':'Neigeux', 'sunny':'Ensoleillé', 'windy-variant':'Venteux', 'windy':'Venteux', 'exceptional':'Exceptionel'}%}
          {% if not state_attr('weather.maison', 'temperature') == 'Indisponible' -%}
            {% if states('weather.gif_sur_yvette') == 'lightning-rainy' -%}
              Pluies orageuses
            {% elif states.sensor.gif_sur_yvette_rain_chance.state | float > 0 -%}
              {{ traduction[meteo] }}
            {% else -%}
              {{ traduction[meteo] }}
            {% endif -%}
          {% else -%}
            Pas d'info
          {% endif -%} 

      weather_conditions_pluie:
        value_template: >-          
          {% set precip = states('sensor.gif_sur_yvette_rain_chance') | round %}
          {% if states.sensor.gif_sur_yvette_rain_chance.state | float > 0 -%}
            {{ precip }}
          {% else -%}
            {{ precip }}
          {% endif -%}    
              
      weather_conditions_neige:
        value_template: >-          
          {% set snow = states('sensor.gif_sur_yvette_snow_chance') | round %}
          {% if states.sensor.gif_sur_yvette_snow_chance.state | float > 0 -%}
            {{ snow }}
          {% else -%}
            {{ snow }}
          {% endif -%}  
              
      weather_conditions_ciel:
        value_template: >-        
          {% set ciel = states('sensor.gif_sur_yvette_cloud_cover') | round -%}
          {% if states.sensor.gif_sur_yvette_cloud_cover.state | float > 10 -%}
            {{ ciel }}
          {% else -%}
            {{ ciel }}
          {% endif -%}          

      weather_vent:
        friendly_name: "Weather vent"
        value_template: 
          "{{ state_attr('weather.gif_sur_yvette' , 'wind_speed') }}"

      weather_conditions_vent:
        value_template: >-        
          {% set vent = states('sensor.weather_vent') | round -%}
          {% if states.sensor.weather_vent.state | float > 20 -%}
            {{ vent }}
          {% else -%}
            {{ vent }}
          {% endif -%}
              
      weather_conditions_uv:
        value_template: >-        
          {% set uv = states('sensor.gif_sur_yvette_uv') | round -%}
          {% if states.sensor.gif_sur_yvette_uv.state | float > 5 -%}
            {{ uv }}
          {% else -%}
            {{ uv }}
          {% endif -%}  
              
      weather_alerte_couleur_v2:
        friendly_name: Alerte météo sans couleur
        value_template: >-
          {% if is_state("sensor.91_weather_alert", "Jaune") -%}
            Vigilance Jaune  
          {% elif is_state("sensor.91_weather_alert", "Orange") -%}
            Vigilance Orange 
          {% elif is_state("sensor.91_weather_alert", "Rouge") -%}
            Vigilance Rouge 
          {% elif is_state("sensor.91_weather_alert", "Vert") -%}
            Aucune vigilance en cours
          {%- endif %}          
            
      weather_alerte:
        friendly_name: Alerte météo
        value_template: >-
          {% if is_state("sensor.91_weather_alert", "Vert") -%}
            Aucune
          {%- endif %} 
          {% if not is_state("sensor.91_weather_alert", "Vert") -%}
          {%- endif %} 
          {% if is_state("sensor.weather_alert_grand_froid", "Jaune") -%} 
            Froid {%- endif %}  
          {% if is_state("sensor.weather_alert_canicule", "Jaune") -%} 
            Canicule {%- endif %} 
          {% if is_state("sensor.weather_alert_neige_verglas", "Jaune") -%} 
            Neige / Verglas{%- endif %}  
          {% if is_state("sensor.weather_alert_inondation", "Jaune") -%} 
            Inondation{%- endif %}  
          {% if is_state("sensor.weather_alert_orages", "Jaune") -%} 
            Orages{%- endif %}  
          {% if is_state("sensor.weather_alert_vent_violent", "Jaune") -%} 
            Vent{%- endif %}  
          {% if is_state("sensor.weather_alert_pluie_inondation", "Jaune") -%} 
            Pluie / Inondation{%- endif %}
          {% if is_state("sensor.weather_alert_grand_froid", "Orange") -%} 
            Froid {%- endif %}
          {% if is_state("sensor.weather_alert_canicule", "Orange") -%} 
            Canicule {%- endif %}
          {% if is_state("sensor.weather_alert_neige_verglas", "Orange") -%} 
            Neige / Verglas{%- endif %}  
          {% if is_state("sensor.weather_alert_inondation", "Orange") -%} 
            Inondation{%- endif %}  
          {% if is_state("sensor.weather_alert_orages", "Orange") -%} 
            Orages{%- endif %}  
          {% if is_state("sensor.weather_alert_vent_violent", "Orange") -%} 
            Vent{%- endif %}  
          {% if is_state("sensor.weather_alert_pluie_inondation", "Orange") -%} 
            Pluie / Inondation{%- endif %}
          {% if is_state("sensor.weather_alert_grand_froid", "Rouge") -%} 
            Froid {%- endif %}  
          {% if is_state("sensor.weather_alert_canicule", "Rouge") -%} 
            Canicule {%- endif %}  
          {% if is_state("sensor.weather_alert_neige_verglas", "Rouge") -%} 
            Neige / Verglas{%- endif %}  
          {% if is_state("sensor.weather_alert_inondation", "Rouge") -%} 
            Inondation{%- endif %}  
          {% if is_state("sensor.weather_alert_orages", "Rouge") -%} 
            Orages{%- endif %}  
          {% if is_state("sensor.weather_alert_vent_violent", "Rouge") -%} 
            Vent{%- endif %}  
          {% if is_state("sensor.weather_alert_pluie_inondation", "Rouge") -%} 
            Pluie / Inondation{%- endif %}

      weather_alerte2:
        friendly_name: Alerte météo
        value_template: >-
          Alerte météo {{states('sensor.91_weather_alert')}} en cours:
            {%- for attribut in ['Vent violent', 'Pluie-inondation', 'Orages', 'Inondation', 'Pluie-inondation', 'Neige-verglas','Canicule', 'Grand-froid', 'Avalanches', 'Vagues-submersion'] %} 
            {%- if state_attr('sensor.91_weather_alert', attribut) == 'Vert' and state_attr('sensor.91_weather_alert', attribut) != None -%}    
            - {{attribut}} : {{state_attr('sensor.91_weather_alert', attribut)}}{{"\n"}}
            {%- endif -%}
            {% endfor %}
              
      weather_soleil:
        friendly_name: Soleil levé couché         
        value_template: >-
          {% if is_state("sun.sun", "above_horizon") -%}
            {{ as_timestamp(states.sun.sun.attributes.next_setting) | timestamp_custom("%-Hh%M") }}
          {% else %}
            {{ as_timestamp(states.sun.sun.attributes.next_rising) | timestamp_custom("%-Hh%M") }} 
          {% endif %}

      weather_leve_soleil:
        friendly_name: Soleil levé           
        value_template: >-
          {{ as_timestamp(states.sun.sun.attributes.next_rising) | timestamp_custom("%-Hh%M") }}  
    
      weather_couche_soleil:
        friendly_name: Soleil couché           
        value_template: >-
          {{ as_timestamp(states.sun.sun.attributes.next_setting) | timestamp_custom("%-Hh%M") }} 
            
      weather_temp_max:
        friendly_name: Température max du jour
        value_template: "{{ states.weather.maison.attributes.forecast[0].temperature|float|round(2) }}"  
            
      weather_temp_min:
        friendly_name: Température min du jour
        value_template: "{{ states.weather.maison.attributes.forecast[0].templow|float|round(0) }}"  

    # BONJOUR MESSAGE
      bonjour:
        friendly_name: Bonjour
        value_template: >-           
          {% if is_state("sun.sun", "above_horizon") -%}
            {% set heure = states('sensor.time') %}
          {% if heure >= '05:00' and heure <= '11:45' -%}
              Bonne matinée 
          {% elif heure > '11:45' and heure < '13:30' -%}
              Bon appétit
          {% elif heure >= '13:30' and heure < '19:00' -%}
              Bon après-midi 
          {% elif  heure >= '19:00' and heure < '23:00' -%}
              Bonsoir    
          {% elif  heure >= '23:00'  -%}
              Bonne nuit 
          {% elif  heure < '04:00'  -%}
              Bonne nuit
          {% else %}
              Salut 
          {% endif %}
          {% elif is_state("sun.sun", "below_horizon") -%}
            {% set heure = states('sensor.time') %}
            {% if heure >= '05:00' and heure <= '11:45' -%}
              Bonne matinée 
          {% elif heure > '11:45' and heure < '13:30' -%}
              Bon appétit 
          {% elif heure >= '13:30' and heure < '18:00' -%}
              Bon après-midi 
            {% elif  heure >= '18:00' and heure < '23:00' -%}
              Bonne soirée   
            {% elif  heure >= '23:00'  -%}
              Bonne nuit
            {% elif  heure < '05:00'  -%}
              Bonne nuit
            {% else %}
              Salut
            {% endif %}
            {% endif %}

    # ANNIVERSAIRES
      anniversaire:
        friendly_name: Anniversaire
        value_template: >-    
          {% if is_state("sensor.date_simple_v2", "12 Juin") -%}
          {% set age  = states.sensor.date_annee.state | int - 1991 %}
            Mehdi ({{ age }} ans)
          {% elif is_state("sensor.date_simple_v2", "22 Octobre") -%}
          {% set age  = states.sensor.date_annee.state | int - 1994 %}
            Yohan ({{ age }} ans)
          {% elif is_state("sensor.date_simple_v2", "17 Janvier") -%}
          {% set age  = states.sensor.date_annee.state | int - 1998 %}
            Sarah ({{ age }} ans)
          {% elif is_state("sensor.date_simple_v2", "15 Juin") -%}
          {% set age  = states.sensor.date_annee.state | int - 2000 %}
            Nicolas ({{ age }} ans)
          {% elif is_state("sensor.date_simple_v2", "8 Mai") -%}
          {% set age  = states.sensor.date_annee.state | int - 1969 %}
            Fabrice ({{ age }} ans)
          {% elif is_state("sensor.date_simple_v2", "31 Octobre") -%}
          {% set age  = states.sensor.date_annee.state | int - 1945 %}
            Mamie Michele  ({{ age }} ans)
          {% elif is_state("sensor.date_simple_v2", "22 Juillet") -%}
          {% set age  = states.sensor.date_annee.state | int - 1960 %}
            Papy Philippe ({{ age }} ans) 
          {% elif is_state("sensor.date_simple_v2", "21 Fevrier") -%}
          {% set age  = states.sensor.date_annee.state | int - 1943 %}
            Mamie Simone ({{ age }} ans) 
          {% elif is_state("sensor.date_simple_v2", "1 Juin") -%}
          {% set age  = states.sensor.date_annee.state | int - 1939 %}
            Papy Alain ({{ age }} ans)
          {% elif is_state("sensor.date_simple_v2", "18 Juin") -%}
          {% set age  = states.sensor.date_annee.state | int - 1968 %}
            Nathalie Caboche ({{ age }} ans)
          {% elif is_state("sensor.date_simple_v2", "19 Novembre") -%}
          {% set age  = states.sensor.date_annee.state | int - 1985 %}
            Cedric ({{ age }} ans) 
          {% elif is_state("sensor.date_simple_v2", "21 Octobre") -%}
          {% set age  = states.sensor.date_annee.state | int - 1988 %}
            Aurelie ({{ age }} ans) 
          {% elif is_state("sensor.date_simple_v2", "17 Octobre") -%}
          {% set age  = states.sensor.date_annee.state | int - 1994 %}
            William ({{ age }} ans)
          {% elif is_state("sensor.date_simple_v2", "30 Juillet") -%}
          {% set age  = states.sensor.date_annee.state | int - 1999 %}
            Aurore ({{ age }} ans)
          {% elif is_state("sensor.date_simple_v2", "1 Janvier") -%}
            Bonne année !
          {% elif is_state("sensor.date_simple_v2", "13 Janvier") -%}
          {% set age  = states.sensor.date_annee.state | int - 1987 %}
            Maxime ({{ age }} ans) 
          {% else %}
            Aucun
          {%- endif %}
          #    {% elif is_state("sensor.date_simple_v2", "30 Mai") -%}
          #    {% set age1  = states.sensor.date_annee.state | int - 2010 %}
          #    {% set age2  = states.sensor.date_annee.state | int - 1952 %}
          #       Manon ({{ age1 }} ans) et Monique ({{ age2 }} ans)
          
    ###### THERMOMETRES TEMPERATURES HUMIDITE

      temp_maison:
        friendly_name: "Temperatures moyennes de la maison"
        unit_of_measurement: "°C"
        value_template: >-
          {{ ((float(states.sensor.capteur_aquara_temp_humidite_bureau_temperature.state)  + float(states.sensor.capteur_aquara_temp_humidite_chambre_temperature.state) + float(states.sensor.capteur_couloir_temperature.state)+ float(states.sensor.capteur_aquara_temp_humidite_sdb_temperature.state)) / 4) | round(1) }}
      hum_maison:
        friendly_name: "Humidité moyennes de la maison"
        unit_of_measurement: "°C"
        value_template: >-
          {{ ((float(states.sensor.sensor.capteur_aquara_temp_humidite_bureau_humidity.state)  + float(states.sensor.capteur_aquara_temp_humidite_chambre_humidity.state) + float(states.sensor.capteur_aquara_temp_humidite_sdb_humidity.state)) / 3) | round(1) }}
      Pres_maison:
        friendly_name: "Pression moyennes de la maison"
        unit_of_measurement: "hPa"
        value_template: >-
          {{ ((float(states.sensor.capteur_aquara_temp_humidite_bureau_pressure.state)  + float(states.sensor.capteur_aquara_temp_humidite_chambre_pressure.state) + float(states.sensor.sensor.capteur_aquara_temp_humidite_sdb_pressure)) / 3) | round(1) }}

      temp_chambre_bureau:
        friendly_name: "Temperatures moyennes de la chambre et bureau"
        unit_of_measurement: "°C"
        value_template: >-
          {{ ((float(states.sensor.capteur_aquara_temp_humidite_chambre_temperature.state)  + float(states.sensor.capteur_aquara_temp_humidite_bureau_temperature.state)) / 2) | round(1) }}
      Hum_chambre_bureau:
        friendly_name: "Humidité moyennes de la chambre et bureau"
        unit_of_measurement: "°C"
        value_template: >-
          {{ ((float(states.sensor.capteur_aquara_temp_humidite_chambre_humidity_rdc.state)  + float(states.sensor.capteur_aquara_temp_humidite_bureau_humidity.state)) / 2) | round(1) }}
      Pres_chambre_bureau:
        friendly_name: "Pression moyennes de la chambre et bureau"
        unit_of_measurement: "hPa"
        value_template: >-
          {{ ((float(states.sensor.capteur_aquara_temp_humidite_chambre_pressure_rdc.state)  + float(states.sensor.capteur_aquara_temp_humidite_bureau_pressure.state)) / 2) | round(1) }}

      temp_sejour_arrondie:
        friendly_name: "Temperature arrondie du séjour"
        unit_of_measurement: "°C"
        value_template: >-
          {{ float(states.sensor.capteur_couloir_temperature.state) | round(1) }} 
              
      temp_couloir_arrondie:
        friendly_name: "Temperature arrondie du couloir"
        unit_of_measurement: "°C"
        value_template: >-
          {{ float(states.sensor.capteur_couloir_temperature.state) | round(1) }} 
            
      temp_chambre_arrondie:
        friendly_name: "Temperature arrondie de la chambre"
        unit_of_measurement: "°C"
        value_template: >-
          {{ float(states.sensor.capteur_aquara_temp_humidite_chambre_temperature.state) | round(1) }} 
      hum_chambre_arrondie:
        friendly_name: "Humidité arrondie de la chambre"
        unit_of_measurement: "%"
        icon_template: mdi:water
        value_template: >-
          {{ float(states.sensor.capteur_aquara_temp_humidite_chambre_humidity.state) | round(1) }} 
      pres_chambre_arrondie:
        friendly_name: "Pression arrondie de la chambre"
        unit_of_measurement: "hPa"
        value_template: >-
          {{ float(states.sensor.capteur_aquara_temp_humidite_chambre_pressure.state) | round(1) }} 

      temp_bureau_arrondie:
        friendly_name: "Tempertaure arrondie du bureau"
        unit_of_measurement: "°C"
        value_template: >-
          {{ float(states.sensor.capteur_aquara_temp_humidite_bureau_temperature.state) | round(1) }} 
      hum_bureau_arrondie:
        friendly_name: "Humidité arrondie du bureau"
        unit_of_measurement: "%"
        icon_template: mdi:water
        value_template: >-
          {{ float(states.sensor.capteur_aquara_temp_humidite_bureau_humidity.state) | round(1) }}
      pres_bureau_arrondie:
        friendly_name: "Pression arrondie du bureau"
        unit_of_measurement: "hPa"
        value_template: >-
          {{ float(states.sensor.capteur_aquara_temp_humidite_bureau_pressure.state) | round(1) }} 
            
      temp_sdb_arrondie:
        friendly_name: "Tempertaure arrondie de la salle de bain"
        unit_of_measurement: "°C"
        value_template: >-
          {{ float(states.sensor.capteur_aquara_temp_humidite_sdb_temperature.state) | round(1) }}
      hum_sdb_arrondie:
        friendly_name: "Humidité arrondie de la salle de bain"
        unit_of_measurement: "%"
        icon_template: mdi:water
        value_template: >-
          {{ float(states.sensor.capteur_aquara_temp_humidite_sdb_humidity.state) | round(1) }} 
      pres_sdb_arrondie:
        friendly_name: "Pression arrondie de la salle de bain"
        unit_of_measurement: "hPa"
        value_template: >-
          {{ float(states.sensor.capteur_aquara_temp_humidite_sdb_pressure.state) | round(1) }} 

    # avoir batterie capteur mouvement hue
      - platform: template
        sensors:
          hue_motion_sensor_hall_battery_level:
          friendly_name: "Hue Motion Sensor Hall Battery Level"
          value_template: '{{state_attr("binary_sensor.capteur_couloir_motion", "battery_level")}}'
          icon_template: '{%- if state_attr("binary_sensor.capteur_couloir_motion", "battery_level") <= 5 %}mdi:battery-outline{%- elif state_attr("binary_sensor.capteur_couloir_motion", "battery_level") >= 95 %}mdi:battery{% else %}mdi:battery-{{(state_attr("binary_sensor.capteur_couloir_motion", "battery_level")|float / 10)|round*10}}{%- endif %}'
          unit_of_measurement: '%'

    # scrape horoscope
      - platform: scrape
        resource: https://astro.rtl.fr/horoscope-jour-gratuit/belier
        name: scrape Belier
        select: 'div[class="col card__body__header__resume"]'
        value_template: '{{ (value.split(">")[0].split(".")[0]) | truncate(255) }}'
        scan_interval: 21600

      - platform: scrape
        resource: https://astro.rtl.fr/horoscope-jour-gratuit/taureau
        name: scrape Taureau
        select: 'div[class="col card__body__header__resume"]'
        value_template: '{{ (value.split(">")[0].split(".")[0]) | truncate(255) }}'
        scan_interval: 21600

      - platform: scrape
        resource: https://astro.rtl.fr/horoscope-jour-gratuit/gemeaux
        name: scrape Gemeaux
        select: 'div[class="col card__body__header__resume"]'
        value_template: '{{ (value.split(">")[0].split(".")[0]) | truncate(255) }}'
        scan_interval: 21600

      - platform: scrape
        resource: https://astro.rtl.fr/horoscope-jour-gratuit/cancer
        name: scrape Cancer
        select: 'div[class="col card__body__header__resume"]'
        value_template: '{{ (value.split(">")[0].split(".")[0]) | truncate(255) }}'
        scan_interval: 21600

      - platform: scrape
        resource: https://astro.rtl.fr/horoscope-jour-gratuit/lion
        name: scrape Lion
        select: 'div[class="col card__body__header__resume"]'
        value_template: '{{ (value.split(">")[0].split(".")[0]) | truncate(255) }}'
        scan_interval: 21600

      - platform: scrape
        resource: https://astro.rtl.fr/horoscope-jour-gratuit/vierge
        name: scrape Vierge
        select: 'div[class="col card__body__header__resume"]'
        value_template: '{{ (value.split(">")[0].split(".")[0]) | truncate(255) }}'
        scan_interval: 21600

      - platform: scrape
        resource: https://astro.rtl.fr/horoscope-jour-gratuit/balance
        name: scrape Balance
        select: 'div[class="col card__body__header__resume"]'
        value_template: '{{ (value.split(">")[0].split(".")[0]) | truncate(255) }}'
        scan_interval: 21600

      - platform: scrape
        resource: https://astro.rtl.fr/horoscope-jour-gratuit/scorpion
        name: scrape Scorpion
        select: 'div[class="col card__body__header__resume"]'
        value_template: '{{ (value.split(">")[0].split(".")[0]) | truncate(255) }}'
        scan_interval: 21600

      - platform: scrape
        resource: https://astro.rtl.fr/horoscope-jour-gratuit/sagittaire
        name: scrape Sagittaire
        select: 'div[class="col card__body__header__resume"]'
        value_template: '{{ (value.split(">")[0].split(".")[0]) | truncate(255) }}'
        scan_interval: 21600

      - platform: scrape
        resource: https://astro.rtl.fr/horoscope-jour-gratuit/capricorne
        name: scrape Capricorne
        select: 'div[class="col card__body__header__resume"]'
        value_template: '{{ (value.split(">")[0].split(".")[0]) | truncate(255) }}'
        scan_interval: 21600

      - platform: scrape
        resource: https://astro.rtl.fr/horoscope-jour-gratuit/verseau
        name: scrape Verseau
        select: 'div[class="col card__body__header__resume"]'
        value_template: '{{ (value.split(">")[0].split(".")[0]) | truncate(255) }}'
        scan_interval: 21600

      - platform: scrape
        resource: https://astro.rtl.fr/horoscope-jour-gratuit/poissons
        name: scrape Poissons
        select: 'div[class="col card__body__header__resume"]'
        value_template: '{{ (value.split(">")[0].split(".")[0]) | truncate(255) }}'
        scan_interval: 21600

    # saison (ete_hiver_primtemps_automne)
      - platform: season


    # Fetes
      - platform: scrape
        name: Fete du Jour - Homme
        resource: https://www.ephemeride.com/free/fete.jsp
        select: ".FeteHomme"
        scan_interval: 28800
        
    #  - platform: scrape
    #    name: Fete du Jour - Femme
    #    resource: https://www.ephemeride.com/free/fete.jsp
    #    select: ".FeteFemme"
    #    scan_interval: 28800

    # measurement resolution is 1/hour
      sampling_size: 24
      max_age:
        days: 1

    #Sensor Random 
      - platform: random
        name: Aléatoire
        minimum: 1  
        maximum: 4

    # Carburant
      - platform: prixCarburant
        stationID:
        - 91140003
        
      - platform: version
        name: hass_version_latest
        source: docker

      - platform: version
        name: hass_version_latest_beta
        beta: true
        source: docker

      - platform: time_date
        display_options:
          ['time', 'date']

      - platform: systemmonitor
        resources:
          - type: disk_use_percent
            arg: /
          - type: memory_use_percent
          - type: processor_use
          - type: last_boot
          - type: throughput_network_in
            arg: eth0
          - type: throughput_network_out
            arg: eth0
          - type: processor_temperature
        

